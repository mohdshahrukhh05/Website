
import { GoogleGenAI, Chat, GenerateContentResponse, Modality } from "@google/genai";
import { ChatMessage } from '../types';

const getAIClient = () => {
    if (!process.env.API_KEY) {
        throw new Error("API_KEY environment variable not set");
    }
    return new GoogleGenAI({ apiKey: process.env.API_KEY });
};

export const getChatbotResponse = async (history: ChatMessage[], newMessage: string): Promise<string> => {
    const ai = getAIClient();
    const chat: Chat = ai.chats.create({
      model: 'gemini-2.5-flash',
      history: history.map(msg => ({
          role: msg.role,
          parts: [{ text: msg.text }]
      })),
    });
    const response: GenerateContentResponse = await chat.sendMessage({ message: newMessage });
    return response.text;
};

export const generateImage = async (prompt: string): Promise<string> => {
    const ai = getAIClient();
    const response = await ai.models.generateImages({
        model: 'imagen-4.0-generate-001',
        prompt: prompt,
        config: {
          numberOfImages: 1,
          outputMimeType: 'image/jpeg',
          aspectRatio: '1:1',
        },
    });
    const base64ImageBytes: string = response.generatedImages[0].image.imageBytes;
    return `data:image/jpeg;base64,${base64ImageBytes}`;
};

export const editImage = async (base64ImageData: string, mimeType: string, prompt: string): Promise<string> => {
    const ai = getAIClient();
    const response = await ai.models.generateContent({
        model: 'gemini-2.5-flash-image',
        contents: {
            parts: [
                {
                    inlineData: {
                        data: base64ImageData,
                        mimeType: mimeType,
                    },
                },
                { text: prompt },
            ],
        },
        config: {
            responseModalities: [Modality.IMAGE],
        },
    });

    for (const part of response.candidates[0].content.parts) {
        if (part.inlineData) {
            const base64ImageBytes: string = part.inlineData.data;
            return `data:image/png;base64,${base64ImageBytes}`;
        }
    }
    throw new Error("No image was generated by the model.");
};

export const analyzeText = async (textToAnalyze: string, task: string): Promise<string> => {
    const ai = getAIClient();
    const fullPrompt = `${task}:\n\n---\n\n${textToAnalyze}`;
    const response: GenerateContentResponse = await ai.models.generateContent({
        model: 'gemini-2.5-pro',
        contents: fullPrompt,
    });
    return response.text;
};

export const generateVideo = async (prompt: string, aspectRatio: '16:9' | '9:16') => {
    const ai = getAIClient();
    let operation = await ai.models.generateVideos({
      model: 'veo-3.1-fast-generate-preview',
      prompt: prompt,
      config: {
        numberOfVideos: 1,
        resolution: '720p',
        aspectRatio: aspectRatio
      }
    });
    
    while (!operation.done) {
      await new Promise(resolve => setTimeout(resolve, 10000));
      operation = await ai.operations.getVideosOperation({operation: operation});
    }

    const downloadLink = operation.response?.generatedVideos?.[0]?.video?.uri;
    if(!downloadLink) {
        throw new Error("Video generation failed or returned no URI.");
    }
    const response = await fetch(`${downloadLink}&key=${process.env.API_KEY}`);
    const videoBlob = await response.blob();
    return URL.createObjectURL(videoBlob);
};
